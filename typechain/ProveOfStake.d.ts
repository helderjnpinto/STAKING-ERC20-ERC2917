/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ProveOfStakeInterface extends ethers.utils.Interface {
  functions: {
    "incNounce()": FunctionFragment;
    "interestsToken()": FunctionFragment;
    "nounce()": FunctionFragment;
    "stake()": FunctionFragment;
    "stakePool(address)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "incNounce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "interestsToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nounce", values?: undefined): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(functionFragment: "stakePool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "incNounce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nounce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {};
}

export class ProveOfStake extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ProveOfStakeInterface;

  functions: {
    incNounce(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "incNounce()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    interestsToken(overrides?: CallOverrides): Promise<[string]>;

    "interestsToken()"(overrides?: CallOverrides): Promise<[string]>;

    nounce(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nounce()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    stake(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stake()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakePool(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "stakePool(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unstake(
      _amountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unstake(uint256)"(
      _amountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  incNounce(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "incNounce()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  interestsToken(overrides?: CallOverrides): Promise<string>;

  "interestsToken()"(overrides?: CallOverrides): Promise<string>;

  nounce(overrides?: CallOverrides): Promise<BigNumber>;

  "nounce()"(overrides?: CallOverrides): Promise<BigNumber>;

  stake(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stake()"(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakePool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "stakePool(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unstake(
    _amountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unstake(uint256)"(
    _amountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    incNounce(overrides?: CallOverrides): Promise<void>;

    "incNounce()"(overrides?: CallOverrides): Promise<void>;

    interestsToken(overrides?: CallOverrides): Promise<string>;

    "interestsToken()"(overrides?: CallOverrides): Promise<string>;

    nounce(overrides?: CallOverrides): Promise<BigNumber>;

    "nounce()"(overrides?: CallOverrides): Promise<BigNumber>;

    stake(overrides?: CallOverrides): Promise<BigNumber>;

    "stake()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakePool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "stakePool(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(
      _amountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unstake(uint256)"(
      _amountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    incNounce(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "incNounce()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    interestsToken(overrides?: CallOverrides): Promise<BigNumber>;

    "interestsToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    nounce(overrides?: CallOverrides): Promise<BigNumber>;

    "nounce()"(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stake()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakePool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "stakePool(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(
      _amountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unstake(uint256)"(
      _amountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    incNounce(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "incNounce()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    interestsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "interestsToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nounce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nounce()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stake()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakePool(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakePool(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstake(
      _amountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unstake(uint256)"(
      _amountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
